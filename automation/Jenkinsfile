pipeline {
    agent any

    environment {
        REPO_NAME='zephyr'
    }

    options {
        skipDefaultCheckout(true)
    }

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh """#!/bin/bash -xe
                    echo -e "✔️ None."
                    """
                }
            }
        }

        stage('Display Environment Variables') {
            steps {
                script {
                    sh """#!/bin/bash -xe
                        printenv
                        echo -e "✔️ Displayed all environment setting."
                    """
                }
            }
        }

        stage('checkout') {
            steps {
                cleanWs()

                script {
                    echo "⏳ Checkout '${REPO_NAME}' repo..."
                }

                dir("${REPO_NAME}") {
                    checkout scm
                }

                script {
                    sh '''#!/bin/bash
                    export PATH=$WEST_BIN_PATH:$PATH
                    source "${ZEPHYR_3X_ENV}/environment-setup-x86_64-pokysdk-linux"
                    echo -e "🛠️ $PATH"
                    echo -e "✅ Checkout is completed "${REPO_NAME}"."

                    if [ ! -d "${REPO_NAME}" ] ; then
                        echo -e "🚫 ${REPO_NAME} directory didn't found."
                        exit -1
                    fi

                    cd "${REPO_NAME}"

                    echo -e "✅ west initialization started"
                    west init -l .

                    echo -e "☑️ west initialization is completed."
                    west update
                    echo -e "☑️ west update is completed."
                    git log -4
                    ls -la ../

                    commit=$(git log -n 1 --pretty=format:"%H")
                    commit_author_name=$(git show -s --format="%an" "$commit")
                    commit_author_email=$(git show -s --format="%ae" "$commit")
                    commit_body=$(git show -s --format="%b" "$commit")
                    commit_subject=$(git show -s --format="%s" "$commit")
                    commit_complete_msg=$(git show -s --format="%B" "$commit")

                    git format-patch -1
                    log=$(./scripts/checkpatch.pl --patch *.patch)
                    echo -e "$log"
                    result=$(echo "$log" | grep ".patch total:")
                    echo -e "$result"
                    check_patch_errors=$(echo "${result}"   | sed -n "s/.*: \\([0-9]\\+\\) errors.*/\\1/p")
                    warnings=$(echo "${result}" | sed -n "s/.*errors, \\([0-9]\\+\\) warnings.*/\\1/p")
                    echo -e "🎯Check-Patch has Errors=> $check_patch_errors Warnings: $warnings\n\n"

                    pr_checker_log=$(${VALIDATION_SCRIPT_DIR}/pr_commit_checker.sh)
                    pr_checker_err=$?
                    echo -e "🎯PR Checker=>\n$pr_checker_log"

                    gitlint_log=$(git log -1 --pretty=%B | gitlint 2>&1)
                    if [ -n "$gitlint_log" ] ; then
                        gitlint_err=1
                        echo -e "🎯GITLINT log=>\n$gitlint_log"
                    else
                       gitlint_err=0
                    fi

                    mapfile -t all_alif_boards_cfgs < <(west boards | grep "alif" | grep -v "fpga")
                    test_apps=("samples/hello_world")
                    total_buildError=0
                    total_cfg_run_cnt=0
                    skipped_cfg_run_cnt=0
                    actual_cfg_run_cnt=0
                    fail_cfg_run_cnt=0
                    success_cfg_run_cnt=0

                    for testApp in ${!test_apps[@]}
                    do
                        for boardName in ${!all_alif_boards_cfgs[@]}
                        do
                           total_cfg_run_cnt=$((total_cfg_run_cnt + 1))
                           echo -e "🚩 Building for Board: ${all_alif_boards_cfgs[boardName]} AND test-app: ${test_apps[testApp]}"
                           if [ -d build ] ; then
                              rm -rf build
                              echo -e "❌ Deleting Build folder..."
                           fi

                           actual_cfg_run_cnt=$((actual_cfg_run_cnt + 1))
                           west build -b ${all_alif_boards_cfgs[boardName]} ${test_apps[testApp]}
                           tmp=$?
                           echo -e "\n\n"
                           total_buildError=$((total_buildError + tmp))
                           echo -e "🚫 Error Status total_buildError: $total_buildError and tmp: $tmp"
                           if [ "$tmp" -ne 0 ] ; then
                               fail_cfg_run_cnt=$((fail_cfg_run_cnt + 1))
                           fi
                        done
                    done
                    echo -e "✅ All Build is completed."
                    echo -e "\n\n"
                    echo -e " 🏆GitLint Result     =>  ${gitlint_err}"
                    echo -e " 🏆PR Checker  Result =>  ${pr_checker_err}"
                    echo -e " 🏆Check-Patch Result =>  Error: $check_patch_errors, Warnings: $warnings"
                    echo -e " 🏆Success: $((actual_cfg_run_cnt - fail_cfg_run_cnt)), Failed: $fail_cfg_run_cnt, Skipped: $skipped_cfg_run_cnt"
                    echo -e " 🔥Total Run => ($actual_cfg_run_cnt/$total_cfg_run_cnt)"
                    total_jenkins_Error=$((total_buildError + check_patch_errors + pr_checker_err + gitlint_err))
                    exit $total_jenkins_Error
                    '''
                }
            }
        }
    }
    post {
        failure {
            echo 'Build failed. Sending email...'
            emailext (
                subject: "🚨 Jenkins Job Failed: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                body: """
                   <p>Build failed for job: <b>${env.CHANGE_URL}</b></p>
                   <p>Build Number: <b>${env.BUILD_NUMBER}</b></p>
                   <p>View details: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                """,
                to: "${env.DEFAULT_OWNER_EMAILS}",
                mimeType: 'text/html'
            )
        }

        success {
            echo 'Build succeeded.'
        }

        always {
            echo "Cleaning up workspace..."
            deleteDir()
        }
    }
}
