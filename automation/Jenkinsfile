pipeline {
    agent any
    options {
        skipDefaultCheckout(true)
    }
    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh """#!/bin/bash -xe
                    echo -e "‚úîÔ∏è None."
                    """
                }
            }
        }
        stage('Environment') {
            steps {
                script {
                    sh """#!/bin/bash -xe
                        printenv
                        echo -e "‚úîÔ∏è Displayed all environment setting."
                    """
                }
            }
        }
        stage('checkout') {
            steps {
                cleanWs()
                script {
                    sh '''#!/bin/bash
                    export PATH=$WEST_BIN_PATH:$PATH
                    source "${ZEPHYR_3X_ENV}/environment-setup-x86_64-pokysdk-linux"
                    repo_name="zephyr_alif"
                    echo -e "üõ†Ô∏è $PATH"

                    echo -e "‚è≥ Checkout Repo '$repo_name' main branch CHANGE_BRANCH: '$CHANGE_BRANCH' BRANCH_NAME: '$BRANCH_NAME'"

                    if [ -d .west ] ; then
                        rm -rvf .west
                        rm -rf *
                    fi

                    west init -m git@github.com:alifsemi/$repo_name.git --mr $CHANGE_BRANCH
                    echo -e "‚úÖ Cloning is completed."
                    west update
                    ls -la
                    echo -e "‚òëÔ∏è cloning process is completed.\n\n"
                    if [ ! -d "zephyr" ] ; then
                        echo -e "üö´ zephyr directory didn't found."
                        exit -1
                    fi
                    cd zephyr
                    git log -4

                    git format-patch -1
                    log=$(./scripts/checkpatch.pl --patch *.patch)
                    echo "$log"
                    result=$(echo "$log" | grep ".patch total:")
                    echo "$result"
                    errors=$(echo "${result}"   | sed -n "s/.*: \\([0-9]\\+\\) errors.*/\\1/p")
                    warnings=$(echo "${result}" | sed -n "s/.*errors, \\([0-9]\\+\\) warnings.*/\\1/p")
                    echo "üéØCheckpatch has Errors: $errors Warnings: $warnings\n\n"

                    mapfile -t all_alif_boards_cfgs < <(west boards | grep "alif")
                    test_apps=("samples/hello_world")
                    total_buildError=0
                    total_cfg_run_cnt=0
                    skipped_cfg_run_cnt=0
                    actual_cfg_run_cnt=0
                    fail_cfg_run_cnt=0
                    success_cfg_run_cnt=0

                    for testApp in ${!test_apps[@]}
                    do
                        for boardName in ${!all_alif_boards_cfgs[@]}
                        do
                           total_cfg_run_cnt=$((total_cfg_run_cnt + 1))
                           echo "üö© Building for Board: ${all_alif_boards_cfgs[boardName]} AND test-app: ${test_apps[testApp]}"
                           if [ -d build ] ; then
                              rm -rf build
                              echo -e "‚ùå Deleting Build folder..."
                           fi

                           actual_cfg_run_cnt=$((actual_cfg_run_cnt + 1))
                           west build -b ${all_alif_boards_cfgs[boardName]} ${test_apps[testApp]}
                           tmp=$?
                           echo -e "\n\n"
                           total_buildError=$((total_buildError + tmp))
                           echo -e "üö´ Error Status total_buildError: $total_buildError and tmp: $tmp"
                           if [ "$tmp" -ne 0 ] ; then
                               fail_cfg_run_cnt=$((fail_cfg_run_cnt + 1))
                           fi
                        done
                    done
                    echo -e "‚úÖ All Build is completed."
                    echo -e "\n\n"
                    echo -e " üèÜCheck-Patch Result =>  Error: $errors, Warnings: $warnings"
                    echo -e " üèÜSuccess: $((actual_cfg_run_cnt - fail_cfg_run_cnt)), Failed: $fail_cfg_run_cnt, Skipped: $skipped_cfg_run_cnt"
                    echo -e " üî•Total Run => ($actual_cfg_run_cnt/$total_cfg_run_cnt)"
                    total_buildError=$((total_buildError + errors))
                    exit $total_buildError
                    '''
                }
            }
        }
    }
    post {
        failure {
            echo 'Build failed. Sending email...'
            emailext (
                subject: "üö® Jenkins Job Failed: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                body: """
                   <p>Build failed for job: <b>${env.CHANGE_URL}</b></p>
                   <p>Build Number: <b>${env.BUILD_NUMBER}</b></p>
                   <p>View details: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                """,
                to: "${env.DEFAULT_OWNER_EMAILS}",
                mimeType: 'text/html'
            )
        }

        success {
            echo 'Build succeeded.'
        }

        always {
            echo "Cleaning up workspace..."
            deleteDir()
        }
    }
}
